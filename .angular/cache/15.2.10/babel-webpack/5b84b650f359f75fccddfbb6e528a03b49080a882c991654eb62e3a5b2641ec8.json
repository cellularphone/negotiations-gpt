{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction ChatInterfaceComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"div\", 15);\n    i0.ɵɵlistener(\"click\", function ChatInterfaceComponent_div_17_Template_div_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const question_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.sendQuestion(question_r1));\n    });\n    i0.ɵɵelementStart(2, \"div\", 16)(3, \"div\", 17);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 18);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const question_r1 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(question_r1.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(question_r1.subtitle);\n  }\n}\nexport class ChatInterfaceComponent {\n  constructor(http) {\n    this.http = http;\n    this.showChatGPT = true; // Initially show the ChatGPT-like section\n    this.preMadeQuestions = [{\n      title: 'What are my rights',\n      subtitle: 'during the layoff period?'\n    }, {\n      title: 'If I find a new job',\n      subtitle: 'do I need to let my current employer know?'\n    }, {\n      title: 'Can my employer fire me',\n      subtitle: 'during the layoff period?'\n    }, {\n      title: 'Explain Change Negotiations',\n      subtitle: 'as if I’m a 5-year old'\n    }];\n  }\n  // Function to toggle to chat interface when the conversation starts\n  startChat() {\n    this.showChatGPT = false;\n    // Add any other logic related to starting the chat\n  }\n\n  sendUserInput(userInput) {\n    // Call the GPT API with user input¨\n    console.log(userInput);\n    this.showChatGPT = false;\n    this.userInput = userInput;\n    // this.http.post('YOUR_GPT_API_ENDPOINT', { message: userInput }).subscribe((response: any) => {\n    //   console.log(response); // Handle the response from the GPT API\n    //   // Display the response in the chat interface messages section\n    // });\n  }\n\n  sendQuestion(question) {\n    console.log(question);\n    this.sendUserInput(question); // Call the method to send the question to the API\n  }\n  static #_ = this.ɵfac = function ChatInterfaceComponent_Factory(t) {\n    return new (t || ChatInterfaceComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChatInterfaceComponent,\n    selectors: [[\"app-chat-interface\"]],\n    decls: 18,\n    vars: 1,\n    consts: [[1, \"container\"], [1, \"row\"], [1, \"col-12\", \"text-center\", \"mt-5\"], [1, \"chat-gpt-circle\", \"bg-primary\", \"text-white\", \"d-flex\", \"align-items-center\", \"justify-content-center\", \"rounded-circle\", \"mb-3\"], [2, \"font-size\", \"36px\"], [1, \"card-title\"], [1, \"card-text\"], [1, \"fixed-bottom\"], [1, \"input-group\", \"mt-4\"], [\"type\", \"text\", \"placeholder\", \"Search pre-made questions...\", 1, \"form-control\"], [1, \"input-group-append\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\"], [1, \"row\", \"mt-4\"], [\"class\", \"col-md-6 mb-3\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-6\", \"mb-3\"], [1, \"question-box\", \"bg-light\", \"border\", \"rounded\", \"p-3\", 3, \"click\"], [1, \"question-content\"], [1, \"title\"], [1, \"subtitle\"]],\n    template: function ChatInterfaceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"span\", 4);\n        i0.ɵɵtext(5, \"GPT\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"h2\", 5);\n        i0.ɵɵtext(7, \"Change Negotiations GPT\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"p\", 6);\n        i0.ɵɵtext(9, \"Custom GPT tool designed to give you more information about the Change Negotiations journey in Finland crafted by people with firsthand experience. We\\u2019re in this together.\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(10, \"div\", 7)(11, \"div\", 8);\n        i0.ɵɵelement(12, \"input\", 9);\n        i0.ɵɵelementStart(13, \"div\", 10)(14, \"button\", 11);\n        i0.ɵɵtext(15, \"Search\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(16, \"div\", 12);\n        i0.ɵɵtemplate(17, ChatInterfaceComponent_div_17_Template, 7, 2, \"div\", 13);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"ngForOf\", ctx.preMadeQuestions);\n      }\n    },\n    dependencies: [i2.NgForOf],\n    styles: [\"@import url(//cdn.jsdelivr.net/bootstrap/4.5.2/css/bootstrap.min.css);\\n@media (min-width: 768px) {\\n  .chat-gpt-circle[_ngcontent-%COMP%] {\\n    width: 100px;\\n    height: 100px;\\n  }\\n}\\n@media (min-width: 992px) {\\n  .chat-gpt-circle[_ngcontent-%COMP%] {\\n    width: 150px;\\n    height: 150px;\\n  }\\n}\\n.chat-gpt-replica[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n  height: 100vh;\\n}\\n\\n.chat-gpt-circle[_ngcontent-%COMP%] {\\n  width: 30px;\\n  height: 30px;\\n  background-color: #007bff;\\n  border-radius: 50%;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  font-size: 2rem;\\n  color: white;\\n}\\n\\nh2[_ngcontent-%COMP%] {\\n  font-size: 1.5rem;\\n  font-weight: bold;\\n  margin-bottom: 1rem;\\n}\\n\\np[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n  line-height: 1.5;\\n}\\n\\n.question-box[_ngcontent-%COMP%] {\\n  width: 100%;\\n  cursor: pointer;\\n  border: none;\\n  border-radius: 5px;\\n  padding: 0.5rem 1rem;\\n  background-color: #f8f8f8;\\n  color: #333;\\n  transition: background-color 0.3s;\\n}\\n\\n.question-box[_ngcontent-%COMP%]:hover {\\n  background-color: #e0e0e0;\\n}\\n\\n.question-content[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n}\\n\\n.title[_ngcontent-%COMP%] {\\n  font-size: 1.2rem;\\n  font-weight: bold;\\n  margin-bottom: 0.5rem;\\n}\\n\\n.subtitle[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n  font-weight: lighter;\\n}\\n\\n.fixed-bottom[_ngcontent-%COMP%] {\\n  position: fixed;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n  margin-bottom: 1rem;\\n}\\n\\n.input-group[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n.input-group-append[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.input-group-append[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  border-radius: 0 5px 5px 0;\\n}\\n\\n.input-group-append[_ngcontent-%COMP%]   i[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2hhdC1pbnRlcmZhY2UvY2hhdC1pbnRlcmZhY2UuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsZ0NBQUE7QUFDQTtFQUNFO0lBQ0UsWUFBQTtJQUNBLGFBQUE7RUFBRjtBQUNGO0FBR0E7RUFDRTtJQUNFLFlBQUE7SUFDQSxhQUFBO0VBREY7QUFDRjtBQUlBO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsbUJBQUE7RUFDQSx1QkFBQTtFQUNBLGFBQUE7QUFGRjs7QUFLQTtFQUNFLFdBQUE7RUFDQSxZQUFBO0VBQ0EseUJBQUE7RUFDQSxrQkFBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0EsZUFBQTtFQUNBLFlBQUE7QUFGRjs7QUFLQTtFQUNFLGlCQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtBQUZGOztBQUtBO0VBQ0UsZUFBQTtFQUNBLGdCQUFBO0FBRkY7O0FBS0E7RUFDRSxXQUFBO0VBQ0EsZUFBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLG9CQUFBO0VBQ0EseUJBQUE7RUFDQSxXQUFBO0VBQ0EsaUNBQUE7QUFGRjs7QUFLQTtFQUNFLHlCQUFBO0FBRkY7O0FBS0E7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxtQkFBQTtBQUZGOztBQUtBO0VBQ0UsaUJBQUE7RUFDQSxpQkFBQTtFQUNBLHFCQUFBO0FBRkY7O0FBS0E7RUFDRSxlQUFBO0VBQ0Esb0JBQUE7QUFGRjs7QUFLQTtFQUNFLGVBQUE7RUFDQSxTQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxtQkFBQTtBQUZGOztBQUtBO0VBQ0UsV0FBQTtBQUZGOztBQUtBO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0FBRkY7O0FBS0E7RUFDRSwwQkFBQTtBQUZGOztBQUtBO0VBQ0UsZUFBQTtBQUZGIiwic291cmNlc0NvbnRlbnQiOlsiQGltcG9ydCB1cmwoJy8vY2RuLmpzZGVsaXZyLm5ldC9ib290c3RyYXAvNC41LjIvY3NzL2Jvb3RzdHJhcC5taW4uY3NzJyk7XG5cbi8qIEFkZCB5b3VyIGN1c3RvbSBzdHlsZXMgaGVyZSAqL1xuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gIC5jaGF0LWdwdC1jaXJjbGUge1xuICAgIHdpZHRoOiAxMDBweDtcbiAgICBoZWlnaHQ6IDEwMHB4O1xuICB9XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xuICAuY2hhdC1ncHQtY2lyY2xlIHtcbiAgICB3aWR0aDogMTUwcHg7XG4gICAgaGVpZ2h0OiAxNTBweDtcbiAgfVxufVxuXG4uY2hhdC1ncHQtcmVwbGljYSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBoZWlnaHQ6IDEwMHZoO1xufVxuXG4uY2hhdC1ncHQtY2lyY2xlIHtcbiAgd2lkdGg6IDMwcHg7XG4gIGhlaWdodDogMzBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZm9udC1zaXplOiAycmVtO1xuICBjb2xvcjogd2hpdGU7XG59XG5cbmgyIHtcbiAgZm9udC1zaXplOiAxLjVyZW07XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xufVxuXG5wIHtcbiAgZm9udC1zaXplOiAxcmVtO1xuICBsaW5lLWhlaWdodDogMS41O1xufVxuXG4ucXVlc3Rpb24tYm94IHtcbiAgd2lkdGg6IDEwMCU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYm9yZGVyOiBub25lO1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOGY4O1xuICBjb2xvcjogIzMzMztcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjNzO1xufVxuXG4ucXVlc3Rpb24tYm94OmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2UwZTBlMDtcbn1cblxuLnF1ZXN0aW9uLWNvbnRlbnQge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4udGl0bGUge1xuICBmb250LXNpemU6IDEuMnJlbTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbn1cblxuLnN1YnRpdGxlIHtcbiAgZm9udC1zaXplOiAxcmVtO1xuICBmb250LXdlaWdodDogbGlnaHRlcjtcbn1cblxuLmZpeGVkLWJvdHRvbSB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbn1cblxuLmlucHV0LWdyb3VwIHtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi5pbnB1dC1ncm91cC1hcHBlbmQge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4uaW5wdXQtZ3JvdXAtYXBwZW5kIGJ1dHRvbiB7XG4gIGJvcmRlci1yYWRpdXM6IDAgNXB4IDVweCAwO1xufVxuXG4uaW5wdXQtZ3JvdXAtYXBwZW5kIGkge1xuICBmb250LXNpemU6IDFyZW07XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;;IAqBMA,+BAAqE;IACbA;MAAA;MAAA;MAAA;MAAA,OAASA,+CAAsB;IAAA,EAAC;IACpFA,+BAA8B;IACTA,YAAoB;IAAAA,iBAAM;IAC7CA,+BAAsB;IAAAA,YAAuB;IAAAA,iBAAM;;;;IADhCA,eAAoB;IAApBA,uCAAoB;IACjBA,eAAuB;IAAvBA,0CAAuB;;;ACjBzD,OAAM,MAAOC,sBAAsB;EAWjCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAVxB,gBAAW,GAAY,IAAI,CAAC,CAAC;IAE7B,qBAAgB,GAAG,CACjB;MAAEC,KAAK,EAAE,oBAAoB;MAAEC,QAAQ,EAAE;IAA2B,CAAE,EACtE;MAAED,KAAK,EAAE,qBAAqB;MAAEC,QAAQ,EAAE;IAA4C,CAAE,EACxF;MAAED,KAAK,EAAE,yBAAyB;MAAEC,QAAQ,EAAE;IAA2B,CAAE,EAC3E;MAAED,KAAK,EAAE,6BAA6B;MAAEC,QAAQ,EAAE;IAAwB,CAAE,CAC7E;EAGsC;EACxC;EACCC,SAAS;IACT,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB;EACA;;EACAC,aAAa,CAACC,SAAiB;IAC7B;IACAC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;IACtB,IAAI,CAACF,WAAW,GAAG,KAAK;IACxB,IAAI,CAACE,SAAS,GAAGA,SAAS;IAC1B;IACA;IACA;IACA;EACF;;EAEAG,YAAY,CAACC,QAAa;IACxBH,OAAO,CAACC,GAAG,CAACE,QAAQ,CAAC;IAErB,IAAI,CAACL,aAAa,CAACK,QAAQ,CAAC,CAAC,CAAC;EAChC;EAAC;qBAhCUZ,sBAAsB;EAAA;EAAA;UAAtBA,sBAAsB;IAAAa;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QDRnClB,8BAAuB;QAKgBA,mBAAG;QAAAA,iBAAO;QAE3CA,6BAAuB;QAAAA,uCAAuB;QAAAA,iBAAK;QACnDA,4BAAqB;QAAAA,gMAA2K;QAAAA,iBAAI;QAIxMA,+BAA0B;QAEtBA,4BAAmF;QACnFA,gCAAgC;QAC0BA,uBAAM;QAAAA,iBAAS;QAI3EA,gCAAsB;QACpBA,0EAOM;QACRA,iBAAM;;;QAR4CA,gBAAmB;QAAnBA,8CAAmB","names":["i0","ChatInterfaceComponent","constructor","http","title","subtitle","startChat","showChatGPT","sendUserInput","userInput","console","log","sendQuestion","question","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/hannuvalve/negotiations-gpt/src/app/chat-interface/chat-interface.component.html","/Users/hannuvalve/negotiations-gpt/src/app/chat-interface/chat-interface.component.ts"],"sourcesContent":["<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12 text-center mt-5\">\n      <div class=\"chat-gpt-circle bg-primary text-white d-flex align-items-center justify-content-center rounded-circle mb-3\">\n        <!-- Your circular icon content goes here -->\n        <span style=\"font-size: 36px;\">GPT</span>\n      </div>\n      <h2 class=\"card-title\">Change Negotiations GPT</h2>\n      <p class=\"card-text\">Custom GPT tool designed to give you more information about the Change Negotiations journey in Finland crafted by people with firsthand experience. We’re in this together.</p>\n    </div>\n  </div>\n\n  <div class=\"fixed-bottom\">\n    <div class=\"input-group mt-4\">\n      <input type=\"text\" class=\"form-control\" placeholder=\"Search pre-made questions...\">\n      <div class=\"input-group-append\">\n        <button class=\"btn btn-outline-secondary\" type=\"button\">Search</button>\n      </div>\n    </div>\n\n    <div class=\"row mt-4\">\n      <div class=\"col-md-6 mb-3\" *ngFor=\"let question of preMadeQuestions\">\n        <div class=\"question-box bg-light border rounded p-3\" (click)=\"sendQuestion(question)\">\n          <div class=\"question-content\">\n            <div class=\"title\">{{ question.title }}</div>\n            <div class=\"subtitle\">{{ question.subtitle }}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-chat-interface',\n  templateUrl: './chat-interface.component.html',\n  styleUrls: ['./chat-interface.component.scss']\n})\nexport class ChatInterfaceComponent {\n  showChatGPT: boolean = true; // Initially show the ChatGPT-like section\n  userInput: string | undefined;\n  preMadeQuestions = [\n    { title: 'What are my rights', subtitle: 'during the layoff period?' },\n    { title: 'If I find a new job', subtitle: 'do I need to let my current employer know?' },\n    { title: 'Can my employer fire me', subtitle: 'during the layoff period?' },\n    { title: 'Explain Change Negotiations', subtitle: 'as if I’m a 5-year old' }\n  ];\n\n  \n  constructor(private http: HttpClient) {}\n // Function to toggle to chat interface when the conversation starts\n  startChat() {\n  this.showChatGPT = false;\n  // Add any other logic related to starting the chat\n  }\n  sendUserInput(userInput: string) {\n    // Call the GPT API with user input¨\n    console.log(userInput);\n    this.showChatGPT = false;\n    this.userInput = userInput;\n    // this.http.post('YOUR_GPT_API_ENDPOINT', { message: userInput }).subscribe((response: any) => {\n    //   console.log(response); // Handle the response from the GPT API\n    //   // Display the response in the chat interface messages section\n    // });\n  }\n\n  sendQuestion(question: any) {\n    console.log(question);\n    \n    this.sendUserInput(question); // Call the method to send the question to the API\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}