{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction ChatInterfaceComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"div\", 17);\n    i0.ɵɵlistener(\"click\", function ChatInterfaceComponent_div_14_Template_div_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const question_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.sendQuestion(question_r1));\n    });\n    i0.ɵɵelementStart(2, \"div\", 18)(3, \"div\", 19);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 20);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const question_r1 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(question_r1.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(question_r1.subtitle);\n  }\n}\nexport class ChatInterfaceComponent {\n  constructor(http) {\n    this.http = http;\n    this.showChatGPT = true; // Initially show the ChatGPT-like section\n    this.preMadeQuestions = [{\n      title: 'What are my rights',\n      subtitle: 'during the layoff period?'\n    }, {\n      title: 'If I find a new job',\n      subtitle: 'do I need to let my current employer know?'\n    }, {\n      title: 'Can my employer fire me',\n      subtitle: 'during the layoff period?'\n    }, {\n      title: 'Explain Change Negotiations',\n      subtitle: 'as if I’m a 5-year old'\n    }];\n  }\n  // Function to toggle to chat interface when the conversation starts\n  startChat() {\n    this.showChatGPT = false;\n    // Add any other logic related to starting the chat\n  }\n\n  sendUserInput(userInput) {\n    // Call the GPT API with user input¨\n    console.log(userInput);\n    this.showChatGPT = false;\n    this.userInput = userInput;\n    // this.http.post('YOUR_GPT_API_ENDPOINT', { message: userInput }).subscribe((response: any) => {\n    //   console.log(response); // Handle the response from the GPT API\n    //   // Display the response in the chat interface messages section\n    // });\n  }\n\n  sendQuestion(question) {\n    console.log(question);\n    this.sendUserInput(question); // Call the method to send the question to the API\n  }\n  static #_ = this.ɵfac = function ChatInterfaceComponent_Factory(t) {\n    return new (t || ChatInterfaceComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChatInterfaceComponent,\n    selectors: [[\"app-chat-interface\"]],\n    decls: 20,\n    vars: 1,\n    consts: [[1, \"container\", \"mt-5\"], [1, \"row\", \"justify-content-center\"], [1, \"col-md-8\"], [1, \"card\", \"text-center\"], [1, \"card-body\"], [1, \"d-flex\", \"flex-column\", \"align-items-center\"], [1, \"chat-gpt-circle\", \"bg-primary\", \"text-white\", \"d-flex\", \"align-items-center\", \"justify-content-center\", \"rounded-circle\", \"mb-3\"], [2, \"font-size\", \"36px\"], [1, \"card-title\"], [1, \"card-text\"], [1, \"row\"], [\"class\", \"col-md-6 mb-3\", 4, \"ngFor\", \"ngForOf\"], [1, \"input-group\", \"mt-4\"], [\"type\", \"text\", \"placeholder\", \"Search pre-made questions...\", 1, \"form-control\"], [1, \"input-group-append\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\"], [1, \"col-md-6\", \"mb-3\"], [1, \"question-box\", \"bg-light\", \"border\", \"rounded\", \"p-3\", 3, \"click\"], [1, \"question-content\"], [1, \"title\"], [1, \"subtitle\"]],\n    template: function ChatInterfaceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"div\", 6)(7, \"span\", 7);\n        i0.ɵɵtext(8, \"GPT\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"h2\", 8);\n        i0.ɵɵtext(10, \"Change Negotiations GPT\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"p\", 9);\n        i0.ɵɵtext(12, \"Custom GPT tool designed to give you more information about the Change Negotiations journey in Finland crafted by people with firsthand experience. We\\u2019re in this together.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 10);\n        i0.ɵɵtemplate(14, ChatInterfaceComponent_div_14_Template, 7, 2, \"div\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 12);\n        i0.ɵɵelement(16, \"input\", 13);\n        i0.ɵɵelementStart(17, \"div\", 14)(18, \"button\", 15);\n        i0.ɵɵtext(19, \"Search\");\n        i0.ɵɵelementEnd()()()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngForOf\", ctx.preMadeQuestions);\n      }\n    },\n    dependencies: [i2.NgForOf],\n    styles: [\".chat-wrapper[_ngcontent-%COMP%] {\\n  width: 100%;\\n  max-width: 928px;\\n  margin: 0 auto;\\n}\\n.chat-wrapper[_ngcontent-%COMP%]   .chat-gpt-circle[_ngcontent-%COMP%] {\\n  width: 120px;\\n  height: 120px;\\n  background-color: #3e64ff;\\n  border-radius: 50%;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  font-size: 36px;\\n  color: #fff;\\n}\\n.chat-wrapper[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%] {\\n  border: none;\\n  border-radius: 10px;\\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\\n  padding: 20px;\\n  margin-top: 20px;\\n}\\n.chat-wrapper[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]   .card-title[_ngcontent-%COMP%] {\\n  font-size: 28px;\\n  font-weight: bold;\\n  margin-bottom: 10px;\\n}\\n.chat-wrapper[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]   .card-text[_ngcontent-%COMP%] {\\n  font-size: 16px;\\n  color: #555;\\n  margin-bottom: 20px;\\n}\\n.chat-wrapper[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]   .question-box[_ngcontent-%COMP%] {\\n  border: 1px solid #ddd;\\n  border-radius: 8px;\\n  background-color: #f7f7f7;\\n  padding: 20px;\\n  margin-bottom: 10px;\\n  cursor: pointer;\\n}\\n.chat-wrapper[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]   .question-box[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%] {\\n  font-size: 18px;\\n  font-weight: bold;\\n  margin-bottom: 5px;\\n}\\n.chat-wrapper[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]   .question-box[_ngcontent-%COMP%]   .subtitle[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  color: #666;\\n}\\n.chat-wrapper[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]   .input-group[_ngcontent-%COMP%] {\\n  margin-top: 20px;\\n}\\n.chat-wrapper[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]   .input-group[_ngcontent-%COMP%]   input[type=text][_ngcontent-%COMP%] {\\n  border-radius: 5px;\\n  border: 1px solid #ccc;\\n  padding: 10px;\\n  font-size: 14px;\\n}\\n.chat-wrapper[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]   .input-group[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%] {\\n  border-radius: 5px;\\n  font-size: 14px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2hhdC1pbnRlcmZhY2UvY2hhdC1pbnRlcmZhY2UuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkNBQUE7QUFPQTtFQUNJLFdBQUE7RUFDQSxnQkFBQTtFQUNBLGNBQUE7QUFMSjtBQU9JO0VBQ0ksWUFBQTtFQUNBLGFBQUE7RUFDQSx5QkFYUTtFQVlSLGtCQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSxlQUFBO0VBQ0EsV0FBQTtBQUxSO0FBUUk7RUFDSSxZQUFBO0VBQ0EsbUJBQUE7RUFDQSwyQ0FBQTtFQUNBLGFBQUE7RUFDQSxnQkFBQTtBQU5SO0FBUVE7RUFDSSxlQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtBQU5aO0FBU1E7RUFDSSxlQUFBO0VBQ0EsV0FBQTtFQUNBLG1CQUFBO0FBUFo7QUFVUTtFQUNJLHNCQUFBO0VBQ0Esa0JBQUE7RUFDQSx5QkFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7QUFSWjtBQVVZO0VBQ0ksZUFBQTtFQUNBLGlCQUFBO0VBQ0Esa0JBQUE7QUFSaEI7QUFXWTtFQUNJLGVBQUE7RUFDQSxXQUFBO0FBVGhCO0FBYVE7RUFDSSxnQkFBQTtBQVhaO0FBYVk7RUFDSSxrQkFBQTtFQUNBLHNCQUFBO0VBQ0EsYUFBQTtFQUNBLGVBQUE7QUFYaEI7QUFjWTtFQUNJLGtCQUFBO0VBQ0EsZUFBQTtBQVpoQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEltcG9ydCBCb290c3RyYXAgdmFyaWFibGVzIHRvIG92ZXJyaWRlICovXG5cblxuLy8gWW91ciBjdXN0b20gc3R5bGVzXG4kcHJpbWFyeS1jb2xvcjogIzNlNjRmZjsgLy8gRXhhbXBsZSBwcmltYXJ5IGNvbG9yXG5cbi8vIENoYXQgR1BUIHN0eWxlc1xuLmNoYXQtd3JhcHBlciB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWF4LXdpZHRoOiA5MjhweDtcbiAgICBtYXJnaW46IDAgYXV0bztcblxuICAgIC5jaGF0LWdwdC1jaXJjbGUge1xuICAgICAgICB3aWR0aDogMTIwcHg7XG4gICAgICAgIGhlaWdodDogMTIwcHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRwcmltYXJ5LWNvbG9yO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBmb250LXNpemU6IDM2cHg7XG4gICAgICAgIGNvbG9yOiAjZmZmO1xuICAgIH1cblxuICAgIC5jYXJkIHtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgICAgICBib3gtc2hhZG93OiAwcHggMHB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICAgICAgICBwYWRkaW5nOiAyMHB4O1xuICAgICAgICBtYXJnaW4tdG9wOiAyMHB4O1xuXG4gICAgICAgIC5jYXJkLXRpdGxlIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jYXJkLXRleHQge1xuICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICAgICAgY29sb3I6ICM1NTU7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLnF1ZXN0aW9uLWJveCB7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y3ZjdmNztcbiAgICAgICAgICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuXG4gICAgICAgICAgICAudGl0bGUge1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5zdWJ0aXRsZSB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgICAgICAgIGNvbG9yOiAjNjY2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLmlucHV0LWdyb3VwIHtcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDIwcHg7XG5cbiAgICAgICAgICAgIGlucHV0W3R5cGU9XCJ0ZXh0XCJdIHtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLmJ0biB7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;;IAe0BA,+BAAqE;IACXA;MAAA;MAAA;MAAA;MAAA,OAASA,+CAAsB;IAAA,EAAC;IAClFA,+BAA8B;IACPA,YAAoB;IAAAA,iBAAM;IAC7CA,+BAAsB;IAAAA,YAAuB;IAAAA,iBAAM;;;;IADhCA,eAAoB;IAApBA,uCAAoB;IACjBA,eAAuB;IAAvBA,0CAAuB;;;ACXnF,OAAM,MAAOC,sBAAsB;EAWjCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAVxB,gBAAW,GAAY,IAAI,CAAC,CAAC;IAE7B,qBAAgB,GAAG,CACjB;MAAEC,KAAK,EAAE,oBAAoB;MAAEC,QAAQ,EAAE;IAA2B,CAAE,EACtE;MAAED,KAAK,EAAE,qBAAqB;MAAEC,QAAQ,EAAE;IAA4C,CAAE,EACxF;MAAED,KAAK,EAAE,yBAAyB;MAAEC,QAAQ,EAAE;IAA2B,CAAE,EAC3E;MAAED,KAAK,EAAE,6BAA6B;MAAEC,QAAQ,EAAE;IAAwB,CAAE,CAC7E;EAGsC;EACxC;EACCC,SAAS;IACT,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB;EACA;;EACAC,aAAa,CAACC,SAAiB;IAC7B;IACAC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;IACtB,IAAI,CAACF,WAAW,GAAG,KAAK;IACxB,IAAI,CAACE,SAAS,GAAGA,SAAS;IAC1B;IACA;IACA;IACA;EACF;;EAEAG,YAAY,CAACC,QAAa;IACxBH,OAAO,CAACC,GAAG,CAACE,QAAQ,CAAC;IAErB,IAAI,CAACL,aAAa,CAACK,QAAQ,CAAC,CAAC,CAAC;EAChC;EAAC;qBAhCUZ,sBAAsB;EAAA;EAAA;UAAtBA,sBAAsB;IAAAa;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QDRnClB,8BAA4B;QAQ6BA,mBAAG;QAAAA,iBAAO;QAE7CA,6BAAuB;QAAAA,wCAAuB;QAAAA,iBAAK;QACnDA,6BAAqB;QAAAA,iMAA2K;QAAAA,iBAAI;QAGpMA,gCAAiB;QACbA,0EAOM;QACVA,iBAAM;QAGNA,gCAA8B;QAC1BA,6BAAmF;QACnFA,gCAAgC;QAC4BA,uBAAM;QAAAA,iBAAS;;;QAd3BA,gBAAmB;QAAnBA,8CAAmB","names":["i0","ChatInterfaceComponent","constructor","http","title","subtitle","startChat","showChatGPT","sendUserInput","userInput","console","log","sendQuestion","question","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/hannuvalve/negotiations-gpt/src/app/chat-interface/chat-interface.component.html","/Users/hannuvalve/negotiations-gpt/src/app/chat-interface/chat-interface.component.ts"],"sourcesContent":["<div class=\"container mt-5\">\n  <div class=\"row justify-content-center\">\n      <div class=\"col-md-8\">\n          <div class=\"card text-center\">\n              <div class=\"card-body\">\n                  <div class=\"d-flex flex-column align-items-center\">\n                      <div class=\"chat-gpt-circle bg-primary text-white d-flex align-items-center justify-content-center rounded-circle mb-3\">\n                          <!-- Your circular icon content goes here -->\n                          <span style=\"font-size: 36px;\">GPT</span>\n                      </div>\n                      <h2 class=\"card-title\">Change Negotiations GPT</h2>\n                      <p class=\"card-text\">Custom GPT tool designed to give you more information about the Change Negotiations journey in Finland crafted by people with firsthand experience. We’re in this together.</p>\n                      \n                      <!-- Pre-made questions in two rows -->\n                      <div class=\"row\">\n                          <div class=\"col-md-6 mb-3\" *ngFor=\"let question of preMadeQuestions\">\n                              <div class=\"question-box bg-light border rounded p-3\" (click)=\"sendQuestion(question)\">\n                                  <div class=\"question-content\">\n                                      <div class=\"title\">{{ question.title }}</div>\n                                      <div class=\"subtitle\">{{ question.subtitle }}</div>\n                                  </div>\n                              </div>\n                          </div>\n                      </div>\n\n                      <!-- Search Box -->\n                      <div class=\"input-group mt-4\">\n                          <input type=\"text\" class=\"form-control\" placeholder=\"Search pre-made questions...\">\n                          <div class=\"input-group-append\">\n                              <button class=\"btn btn-outline-secondary\" type=\"button\">Search</button>\n                          </div>\n                      </div>\n                  </div>\n              </div>\n          </div>\n      </div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-chat-interface',\n  templateUrl: './chat-interface.component.html',\n  styleUrls: ['./chat-interface.component.scss']\n})\nexport class ChatInterfaceComponent {\n  showChatGPT: boolean = true; // Initially show the ChatGPT-like section\n  userInput: string | undefined;\n  preMadeQuestions = [\n    { title: 'What are my rights', subtitle: 'during the layoff period?' },\n    { title: 'If I find a new job', subtitle: 'do I need to let my current employer know?' },\n    { title: 'Can my employer fire me', subtitle: 'during the layoff period?' },\n    { title: 'Explain Change Negotiations', subtitle: 'as if I’m a 5-year old' }\n  ];\n\n  \n  constructor(private http: HttpClient) {}\n // Function to toggle to chat interface when the conversation starts\n  startChat() {\n  this.showChatGPT = false;\n  // Add any other logic related to starting the chat\n  }\n  sendUserInput(userInput: string) {\n    // Call the GPT API with user input¨\n    console.log(userInput);\n    this.showChatGPT = false;\n    this.userInput = userInput;\n    // this.http.post('YOUR_GPT_API_ENDPOINT', { message: userInput }).subscribe((response: any) => {\n    //   console.log(response); // Handle the response from the GPT API\n    //   // Display the response in the chat interface messages section\n    // });\n  }\n\n  sendQuestion(question: any) {\n    console.log(question);\n    \n    this.sendUserInput(question); // Call the method to send the question to the API\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}